import { Keyboards } from "../keyboards/keyboards.js";
import { EventsService } from "../services/eventsService.js";

export class MessageHandler {
  constructor(bot) {
    this.bot = bot;
    this.userStates = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleMessage(context) {
    const userId = context.senderId;
    const text = context.text?.toLowerCase() || "";
    const payload = context.messagePayload;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ payload
    if (payload) {
      return this.handlePayload(context, payload);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (text === "start" || text === "–Ω–∞—á–∞—Ç—å") {
      return this.showWelcomeMessage(context);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    switch (text) {
      case "–º–µ–Ω—é":
        return this.showMainMenu(context);

      case "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
      case "events":
        return this.showEvents(context);

      case "–º–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏":
      case "registrations":
        return this.showMyRegistrations(context);

      case "–ø–æ–º–æ—â—å":
      case "help":
        return this.showHelp(context);

      default:
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (
          this.userStates.has(userId) &&
          (this.userStates.get(userId).state === "selecting_participants" ||
            this.userStates.get(userId).state === "changing_participants")
        ) {
          return this.handleParticipantsCount(context, text);
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if (
          this.userStates.has(userId) &&
          this.userStates.get(userId).state === "entering_team_name"
        ) {
          return this.handleTeamNameInput(context, text);
        }
        return this.showMainMenu(context);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ payload –∫–æ–º–∞–Ω–¥
  async handlePayload(context, payload) {
    const userId = context.senderId;
    const command = payload.command;

    switch (command) {
      case "start_bot":
        return this.showMainMenu(context);

      case "main_menu":
        return this.showMainMenu(context);

      case "events":
        return this.showEvents(context);

      case "event_details":
        return this.showEventDetails(context, payload.eventId);

      case "register":
        return this.showParticipantsCountSelection(context, payload.eventId);

      case "confirm_register":
        return this.showTeamNameInput(
          context,
          payload.eventId,
          payload.participantsCount
        );

      case "confirm_register_with_team":
        return this.registerUser(
          context,
          payload.eventId,
          payload.participantsCount,
          payload.teamName
        );

      case "cancel_registration":
        return this.cancelRegistration(context, payload.eventId);

      case "change_participants":
        return this.showParticipantsCountSelection(
          context,
          payload.eventId,
          true
        );

      case "confirm_change_participants":
        return this.changeParticipantsCount(
          context,
          payload.eventId,
          payload.participantsCount
        );

      case "my_registrations":
        return this.showMyRegistrations(context);

      case "help":
        return this.showHelp(context);

      case "contacts":
        return this.showContacts(context);

      default:
        return this.showMainMenu(context);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  async showWelcomeMessage(context) {
    await context.send({
      message: `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!`,
      keyboard: Keyboards.getWelcomeKeyboard(),
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  async showMainMenu(context) {
    await context.send({
      message: `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      keyboard: Keyboards.getMainMenu(),
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
  async showEvents(context) {
    const events = await EventsService.getActiveEvents();

    if (events.length === 0) {
      await context.send({
        message:
          "üìÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ!",
        keyboard: Keyboards.getMainMenu(),
      });
      return;
    }

    let message = "üìÖ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**\n\n";

    events.forEach((event, index) => {
      const date = EventsService.formatEventDate(event.event_date);
      message += `${index + 1}. **${event.name}**\n`;
      message += `üìÖ ${date}\n`;
      if (event.location) {
        message += `üìç ${event.location}\n`;
      }
      message += "\n";
    });

    await context.send({
      message,
      keyboard: Keyboards.getEventsList(events),
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  async showEventDetails(context, eventId) {
    const event = await EventsService.getEventById(eventId);

    if (!event) {
      await context.send({
        message: "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        keyboard: Keyboards.getMainMenu(),
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const registrations = await EventsService.getUserRegistrations(
      context.senderId
    );
    const isRegistered = registrations.some((reg) => reg.event_id === eventId);
    const currentRegistration = registrations.find(
      (reg) => reg.event_id === eventId
    );

    const date = EventsService.formatEventDate(event.event_date);

    let message = `üìÖ **${event.name}**\n\n`;
    message += `üìÖ **–î–∞—Ç–∞:** ${date}\n`;

    if (event.location) {
      message += `üìç **–ú–µ—Å—Ç–æ:** ${event.location}\n`;
    }

    if (event.description) {
      message += `\nüìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n${event.description}\n`;
    }

    if (event.max_participants) {
      message += `\nüë• **–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${event.max_participants}`;
    }

    if (isRegistered) {
      const participantsCount = currentRegistration?.participants_count || 1;
      const teamName = currentRegistration?.team_name;
      message += `\n\n‚úÖ **–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ**`;
      message += `\nüë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${participantsCount}`;
      if (teamName) {
        message += `\nüèÜ **–ö–æ–º–∞–Ω–¥–∞:** ${teamName}`;
      }
    }

    await context.send({
      message,
      keyboard: Keyboards.getEventDetails(
        event,
        isRegistered,
        currentRegistration
      ),
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  async showParticipantsCountSelection(context, eventId, isChanging = false) {
    const event = await EventsService.getEventById(eventId);

    if (!event) {
      await context.send({
        message: "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        keyboard: Keyboards.getMainMenu(),
      });
      return;
    }

    const date = EventsService.formatEventDate(event.event_date);

    let message = `üìÖ **${event.name}**\n\n`;
    message += `üìÖ **–î–∞—Ç–∞:** ${date}\n`;

    if (event.location) {
      message += `üìç **–ú–µ—Å—Ç–æ:** ${event.location}\n`;
    }

    if (isChanging) {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const registrations = await EventsService.getUserRegistrations(
        context.senderId
      );
      const currentRegistration = registrations.find(
        (reg) => reg.event_id === eventId
      );
      const currentCount = currentRegistration?.participants_count || 1;

      message += `\nüë• **–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${currentCount}\n`;
      message += `\nüë• **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n`;
    } else {
      message += `\nüë• **–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?**\n`;
    }
    message += `–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userStates.set(context.senderId, {
      state: isChanging ? "changing_participants" : "selecting_participants",
      eventId: eventId,
      isChanging: isChanging,
    });

    await context.send({
      message,
      keyboard: Keyboards.getParticipantsCountKeyboard(eventId, isChanging),
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  async handleParticipantsCount(context, text) {
    const userId = context.senderId;
    const userState = this.userStates.get(userId);

    if (
      !userState ||
      (userState.state !== "selecting_participants" &&
        userState.state !== "changing_participants")
    ) {
      return this.showMainMenu(context);
    }

    const participantsCount = parseInt(text);

    if (
      isNaN(participantsCount) ||
      participantsCount < 1 ||
      participantsCount > 12
    ) {
      await context.send({
        message: "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12",
        keyboard: Keyboards.getParticipantsCountKeyboard(
          userState.eventId,
          userState.isChanging
        ),
      });
      return;
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userStates.delete(userId);

    if (userState.isChanging) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await this.showChangeParticipantsConfirm(
        context,
        userState.eventId,
        participantsCount
      );
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      await this.showRegistrationConfirm(
        context,
        userState.eventId,
        participantsCount
      );
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  async showTeamNameInput(context, eventId, participantsCount = 1) {
    const event = await EventsService.getEventById(eventId);

    if (!event) {
      await context.send({
        message: "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        keyboard: Keyboards.getMainMenu(),
      });
      return;
    }

    const date = EventsService.formatEventDate(event.event_date);

    let message = `üìÖ **${event.name}**\n\n`;
    message += `üìÖ **–î–∞—Ç–∞:** ${date}\n`;

    if (event.location) {
      message += `üìç **–ú–µ—Å—Ç–æ:** ${event.location}\n`;
    }

    message += `üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${participantsCount}\n`;
    message += `\nüèÜ **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):**\n`;
    message += `_–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤_`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userStates.set(context.senderId, {
      state: "entering_team_name",
      eventId: eventId,
      participantsCount: participantsCount,
    });

    await context.send({
      message,
      keyboard: Keyboards.getTeamNameInput(eventId, participantsCount),
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  async handleTeamNameInput(context, text) {
    const userId = context.senderId;
    const userState = this.userStates.get(userId);

    if (!userState || userState.state !== "entering_team_name") {
      return this.showMainMenu(context);
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userStates.delete(userId);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    const teamName = text.trim();

    if (!teamName) {
      await context.send({
        message:
          "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.",
        keyboard: Keyboards.getTeamNameInput(
          userState.eventId,
          userState.participantsCount
        ),
      });
      return;
    }

    if (teamName.length > 50) {
      await context.send({
        message: "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.",
        keyboard: Keyboards.getTeamNameInput(
          userState.eventId,
          userState.participantsCount
        ),
      });
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await this.showRegistrationConfirm(
      context,
      userState.eventId,
      userState.participantsCount,
      teamName
    );
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async showRegistrationConfirm(
    context,
    eventId,
    participantsCount = 1,
    teamName = null
  ) {
    const event = await EventsService.getEventById(eventId);

    if (!event) {
      await context.send({
        message: "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        keyboard: Keyboards.getMainMenu(),
      });
      return;
    }

    const date = EventsService.formatEventDate(event.event_date);

    let message = `üìÖ **${event.name}**\n\n`;
    message += `üìÖ **–î–∞—Ç–∞:** ${date}\n`;

    if (event.location) {
      message += `üìç **–ú–µ—Å—Ç–æ:** ${event.location}\n`;
    }

    message += `üë• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${participantsCount}\n`;

    if (teamName) {
      message += `üèÜ **–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:** ${teamName}\n`;
    }

    message += `\n‚ùì **–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?**`;

    await context.send({
      message,
      keyboard: Keyboards.getRegistrationConfirm(
        eventId,
        participantsCount,
        teamName
      ),
    });
  }

  // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async registerUser(context, eventId, participantsCount = 1, teamName = null) {
    const userInfo = {
      name: context.senderId, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –í–ö
      phone: null,
      participantsCount: participantsCount,
      teamName: teamName,
    };

    const result = await EventsService.registerUser(
      eventId,
      context.senderId,
      userInfo
    );

    await context.send({
      message: result.message,
      keyboard: Keyboards.getMainMenu(),
    });
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
  async cancelRegistration(context, eventId) {
    const result = await EventsService.cancelRegistration(
      eventId,
      context.senderId
    );

    await context.send({
      message: result.message,
      keyboard: Keyboards.getMainMenu(),
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  async showChangeParticipantsConfirm(context, eventId, newParticipantsCount) {
    const event = await EventsService.getEventById(eventId);

    if (!event) {
      await context.send({
        message: "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        keyboard: Keyboards.getMainMenu(),
      });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const registrations = await EventsService.getUserRegistrations(
      context.senderId
    );
    const currentRegistration = registrations.find(
      (reg) => reg.event_id === eventId
    );
    const currentCount = currentRegistration?.participants_count || 1;

    const date = EventsService.formatEventDate(event.event_date);

    let message = `üìÖ **${event.name}**\n\n`;
    message += `üìÖ **–î–∞—Ç–∞:** ${date}\n`;

    if (event.location) {
      message += `üìç **–ú–µ—Å—Ç–æ:** ${event.location}\n`;
    }

    message += `üë• **–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${currentCount}\n`;
    message += `üë• **–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** ${newParticipantsCount}\n`;
    message += `\n‚ùì **–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?**`;

    await context.send({
      message,
      keyboard: Keyboards.getChangeParticipantsConfirm(
        eventId,
        newParticipantsCount
      ),
    });
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  async changeParticipantsCount(context, eventId, newParticipantsCount) {
    const result = await EventsService.changeParticipantsCount(
      eventId,
      context.senderId,
      newParticipantsCount
    );

    await context.send({
      message: result.message,
      keyboard: Keyboards.getMainMenu(),
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async showMyRegistrations(context) {
    const registrations = await EventsService.getUserRegistrations(
      context.senderId
    );

    if (registrations.length === 0) {
      await context.send({
        message: "üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
        keyboard: Keyboards.getMainMenu(),
      });
      return;
    }

    let message = "üìù **–í–∞—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n";

    registrations.forEach((registration, index) => {
      const event = registration.events;
      const date = EventsService.formatEventDate(event.event_date);
      const participantsCount = registration.participants_count || 1;
      const teamName = registration.team_name;

      message += `${index + 1}. **${event.name}**\n`;
      message += `üìÖ ${date}\n`;
      if (event.location) {
        message += `üìç ${event.location}\n`;
      }
      message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantsCount}\n`;
      if (teamName) {
        message += `üèÜ –ö–æ–º–∞–Ω–¥–∞: ${teamName}\n`;
      }
      message += "\n";
    });

    await context.send({
      message,
      keyboard: Keyboards.getMyRegistrations(registrations),
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
  async showHelp(context) {
    const message = `‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /events - –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚Ä¢ /registrations - –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –í—ã–±–µ—Ä–∏—Ç–µ "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
3. –ù–∞–∂–º–∏—Ç–µ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" –¥–ª—è —É—á–∞—Å—Ç–∏—è
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

    await context.send({
      message,
      keyboard: Keyboards.getHelp(),
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
  async showContacts(context) {
    const message = `üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã**

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:**
‚Ä¢ Email: support@example.com
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX

**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:**
‚Ä¢ @username (–í–ö–æ–Ω—Ç–∞–∫—Ç–µ)

**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:**
–ü–Ω-–ü—Ç: 9:00 - 18:00
–°–±-–í—Å: 10:00 - 16:00`;

    await context.send({
      message,
      keyboard: Keyboards.getMainMenu(),
    });
  }
}
