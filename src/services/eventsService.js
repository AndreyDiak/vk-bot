import {
  EVENTS_TABLE,
  REGISTRATIONS_TABLE,
  supabase,
} from "../config/database.js";

export class EventsService {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  static async getActiveEvents() {
    try {
      if (!supabase) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        return [
          {
            id: 1,
            title: "–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
            description:
              "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞",
            event_date: new Date(
              Date.now() + 7 * 24 * 60 * 60 * 1000
            ).toISOString(),
            location: "–û–Ω–ª–∞–π–Ω",
            max_participants: 50,
            is_active: true,
          },
        ];
      }

      const { data, error } = await supabase
        .from(EVENTS_TABLE)
        .select("*")
        .gte("event_date", new Date().toISOString())
        .eq("is_active", true)
        .order("event_date", { ascending: true });

      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error("Error fetching events:", error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ ID
  static async getEventById(eventId) {
    try {
      const { data, error } = await supabase
        .from(EVENTS_TABLE)
        .select("*")
        .eq("id", eventId)
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error("Error fetching event:", error);
      return null;
    }
  }

  // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  static async registerUser(eventId, userId, userInfo = {}) {
    try {
      if (!supabase) {
        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ Supabase
        const event = await this.getEventById(eventId);
        if (!event) {
          return {
            success: false,
            message: "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ",
          };
        }

        const participantsCount = userInfo.participantsCount || 1;
        console.log(
          `üìù –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ${eventId} (${participantsCount} —á–µ–ª.)`
        );

        return {
          success: true,
          message: `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${
            event.title
          }" –Ω–∞ ${participantsCount} ${
            participantsCount === 1 ? "—á–µ–ª–æ–≤–µ–∫–∞" : "—á–µ–ª–æ–≤–µ–∫"
          }! (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)`,
          registration: {
            id: Date.now(),
            event_id: eventId,
            user_id: userId,
            participants_count: participantsCount,
          },
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const { data: existingRegistration } = await supabase
        .from(REGISTRATIONS_TABLE)
        .select("id")
        .eq("event_id", eventId)
        .eq("user_id", userId)
        .single();

      if (existingRegistration) {
        return {
          success: false,
          message: "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
      const event = await this.getEventById(eventId);
      if (!event) {
        return { success: false, message: "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" };
      }

      const participantsCount = userInfo.participantsCount || 1;

      if (event.max_participants) {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const { data: registrations } = await supabase
          .from(REGISTRATIONS_TABLE)
          .select("participants_count")
          .eq("event_id", eventId);

        const totalRegistered =
          registrations?.reduce(
            (sum, reg) => sum + (reg.participants_count || 1),
            0
          ) || 0;

        if (totalRegistered + participantsCount > event.max_participants) {
          return {
            success: false,
            message: `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç. –î–æ—Å—Ç—É–ø–Ω–æ: ${
              event.max_participants - totalRegistered
            }`,
          };
        }
      }

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data, error } = await supabase
        .from(REGISTRATIONS_TABLE)
        .insert({
          event_id: eventId,
          user_id: userId,
          participants_count: participantsCount,
          user_name: userInfo.name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          user_phone: userInfo.phone || null,
          registered_at: new Date().toISOString(),
        })
        .select()
        .single();

      if (error) throw error;

      const participantsText =
        participantsCount === 1 ? "—É—á–∞—Å—Ç–Ω–∏–∫–∞" : "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤";
      return {
        success: true,
        message: `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.name}" –Ω–∞ ${participantsCount} ${participantsText}`,
        registration: data,
      };
    } catch (error) {
      console.error("Error registering user:", error);
      return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" };
    }
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
  static async cancelRegistration(eventId, userId) {
    try {
      const { error } = await supabase
        .from(REGISTRATIONS_TABLE)
        .delete()
        .eq("event_id", eventId)
        .eq("user_id", userId);

      if (error) throw error;

      return { success: true, message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" };
    } catch (error) {
      console.error("Error canceling registration:", error);
      return {
        success: false,
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async getUserRegistrations(userId) {
    try {
      const { data, error } = await supabase
        .from(REGISTRATIONS_TABLE)
        .select(
          `
          *,
          events (
            id,
            name,
            event_date,
            location
          )
        `
        )
        .eq("user_id", userId)
        .order("registered_at", { ascending: false });

      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error("Error fetching user registrations:", error);
      return [];
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  static formatEventDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString("ru-RU", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  }
}
