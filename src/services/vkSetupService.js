import { VK } from "vk-io";

export class VKSetupService {
  constructor(accessToken) {
    this.vk = new VK({
      token: accessToken,
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
  async getGroupInfo(groupId) {
    try {
      const response = await this.vk.api.groups.getById({
        group_id: groupId,
        fields: "description,status,type,photo_200,member_count",
      });

      return {
        success: true,
        group: response[0],
      };
    } catch (error) {
      console.error("Error getting group info:", error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Callback API
  async setupCallbackAPI(groupId, webhookUrl, confirmationToken) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º server_id –¥–ª—è –≥—Ä—É–ø–ø—ã
      const serverInfo = await this.vk.api.groups.getCallbackServers({
        group_id: groupId,
      });

      let serverId;
      if (serverInfo.items && serverInfo.items.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π server_id
        serverId = serverInfo.items[0].id;
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
        const newServer = await this.vk.api.groups.addCallbackServer({
          group_id: groupId,
          url: webhookUrl,
          title: "Events Bot Server",
          secret_key: confirmationToken,
        });
        serverId = newServer.server_id;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const currentSettings = await this.vk.api.groups.getCallbackSettings({
        group_id: groupId,
        server_id: serverId,
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Callback API
      const response = await this.vk.api.groups.setCallbackSettings({
        group_id: groupId,
        server_id: serverId,
        secret_key: confirmationToken,
        api_version: "5.131",
        message_new: 1,
        message_reply: 1,
        message_edit: 1,
        message_allow: 1,
        message_deny: 1,
        photo_new: 1,
        audio_new: 1,
        video_new: 1,
        wall_reply_new: 1,
        wall_reply_edit: 1,
        wall_reply_delete: 1,
        wall_reply_restore: 1,
        wall_post_new: 1,
        wall_repost: 1,
        board_post_new: 1,
        board_post_edit: 1,
        board_post_restore: 1,
        board_post_delete: 1,
        photo_comment_new: 1,
        photo_comment_edit: 1,
        photo_comment_delete: 1,
        photo_comment_restore: 1,
        video_comment_new: 1,
        video_comment_edit: 1,
        video_comment_delete: 1,
        video_comment_restore: 1,
        market_comment_new: 1,
        market_comment_edit: 1,
        market_comment_delete: 1,
        market_comment_restore: 1,
        poll_vote_new: 1,
        group_join: 1,
        group_leave: 1,
        group_change_settings: 1,
        group_change_photo: 1,
        group_officers_edit: 1,
        user_block: 1,
        user_unblock: 1,
        lead_forms_new: 1,
        like_add: 1,
        like_remove: 1,
      });

      return {
        success: true,
        settings: response,
        message: "Callback API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      };
    } catch (error) {
      console.error("Error setting up Callback API:", error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
  async setupBotPermissions(groupId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞
      const currentRights = await this.vk.api.groups.getTokenPermissions({
        group_id: groupId,
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è –±–æ—Ç–∞
      const requiredRights = [
        "messages", // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        "photos", // –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        "docs", // –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        "wall", // –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–µ–Ω–æ–π
        "groups", // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π
        "stats", // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        "market", // –¢–æ–≤–∞—Ä—ã
        "stories", // –ò—Å—Ç–æ—Ä–∏–∏
        "app_widget", // –í–∏–¥–∂–µ—Ç—ã
        "manage", // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      ];

      return {
        success: true,
        currentRights: currentRights,
        requiredRights: requiredRights,
        message: "–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã",
      };
    } catch (error) {
      console.error("Error checking bot permissions:", error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –±–æ—Ç–∞
  async createBotMenu(groupId) {
    try {
      // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –¥–ª—è –±–æ—Ç–∞
      const menu = {
        one_time: false,
        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: "events" }),
                label: "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
              },
              color: "primary",
            },
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: "my_registrations" }),
                label: "üìù –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
              },
              color: "secondary",
            },
          ],
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: "help" }),
                label: "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
              },
              color: "secondary",
            },
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: "contacts" }),
                label: "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
              },
              color: "secondary",
            },
          ],
        ],
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é (—ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π)
      const response = await this.vk.api.messages.send({
        peer_id: -groupId,
        message: "ü§ñ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        keyboard: JSON.stringify(menu),
        random_id: Math.floor(Math.random() * 2147483647),
      });

      return {
        success: true,
        message: "–ú–µ–Ω—é –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ",
        response: response,
      };
    } catch (error) {
      console.error("Error creating bot menu:", error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
  async setGroupDescription(groupId, description) {
    try {
      const response = await this.vk.api.groups.edit({
        group_id: groupId,
        description: description,
      });

      return {
        success: true,
        message: "–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      };
    } catch (error) {
      console.error("Error setting group description:", error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  // –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
  async setupBot(groupId, webhookUrl, confirmationToken) {
    try {
      const results = {
        groupInfo: null,
        callbackAPI: null,
        permissions: null,
        menu: null,
        description: null,
      };

      // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
      console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ...");
      results.groupInfo = await this.getGroupInfo(groupId);
      if (!results.groupInfo.success) {
        throw new Error(
          `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: ${results.groupInfo.error}`
        );
      }

      // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Callback API
      console.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Callback API...");
      results.callbackAPI = await this.setupCallbackAPI(
        groupId,
        webhookUrl,
        confirmationToken
      );
      if (!results.callbackAPI.success) {
        throw new Error(
          `–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Callback API: ${results.callbackAPI.error}`
        );
      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
      console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞...");
      results.permissions = await this.setupBotPermissions(groupId);
      if (!results.permissions.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: ${results.permissions.error}`);
      }

      // 4. –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –±–æ—Ç–∞
      console.log("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –±–æ—Ç–∞...");
      results.menu = await this.createBotMenu(groupId);
      if (!results.menu.success) {
        console.warn(
          `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω—é: ${results.menu.error}`
        );
      }

      // 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã...");
      const description = `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
üìÖ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
üìù –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏
‚ÑπÔ∏è –ü–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!`;

      results.description = await this.setGroupDescription(
        groupId,
        description
      );
      if (!results.description.success) {
        console.warn(
          `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ: ${results.description.error}`
        );
      }

      return {
        success: true,
        message: "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!",
        results: results,
      };
    } catch (error) {
      console.error("Error setting up bot:", error);
      return {
        success: false,
        error: error.message,
        results: results,
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  async checkSetupStatus(groupId) {
    try {
      const groupInfo = await this.getGroupInfo(groupId);
      const permissions = await this.setupBotPermissions(groupId);

      return {
        success: true,
        group: groupInfo.group,
        permissions: permissions.currentRights,
        isConfigured: groupInfo.success && permissions.success,
      };
    } catch (error) {
      console.error("Error checking setup status:", error);
      return {
        success: false,
        error: error.message,
      };
    }
  }
}
